(define (shortest-path g x y)
  (define (bfs queue visited)
    (if (null? queue)
        #f
        (let* ((current (car queue))
               (node (car current))
               (path (cdr current)))
          (if (equal? node y)
              (reverse path)
              (bfs (append (map (lambda (neighbor)
                                  (if (member neighbor visited)
                                      '()
                                      (cons neighbor (cons neighbor path))))
                                (cdr (assoc node g)))
                           (cdr queue))
                   (cons node visited))))))
  (bfs (list (cons x (list x))) '()))
